{
  "resourceType": "Library",
  "id": "HIVDataElements",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.10.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": false
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "None"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  } ],
  "url": "http://fhir.org/guides/nachc/hiv-cds/Library/HIVDataElements",
  "name": "HIVDataElements",
  "title": "Library - HIV Data Elements",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "description": "A Generated Logic library encapsulating necessary concepts and data elements in relation for HIV Screening in context of the Patient.",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Library NC",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/Library/NACHCCommon"
  }, {
    "type": "depends-on",
    "display": "Library AC",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/Library/HIVCommon"
  }, {
    "type": "depends-on",
    "display": "Library Cx",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/Library/HIVConcepts"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system ConditionVerificationStatusCodes",
    "resource": "http://terminology.hl7.org/CodeSystem/condition-ver-status"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMED-CT",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Code system Extended Codes CodeSystem",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom"
  }, {
    "type": "depends-on",
    "display": "Code system Observation Interpretation",
    "resource": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation"
  }, {
    "type": "depends-on",
    "display": "Code system NIDA",
    "resource": "https://cde.drugabuse.gov"
  }, {
    "type": "depends-on",
    "display": "Value set Encounter Type Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a0-de2"
  }, {
    "type": "depends-on",
    "display": "Value set HIV infection as a condition Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a1-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Active Condition",
    "resource": "http://fhir.org/guides/cqf/common/ValueSet/active-condition"
  }, {
    "type": "depends-on",
    "display": "Value set Tuberculosis (Disorders) (ICD10CM)",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.451"
  }, {
    "type": "depends-on",
    "display": "Value set HIV-1 HIV 2 Ab Ag tests Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a2-de2"
  }, {
    "type": "depends-on",
    "display": "Value set HIV Test Ordered Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a2-de217"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-b1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C Procedures Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-b2-de113"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-c1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Gonorrhea Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-d1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Chlamydia Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-e1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Drug Rehabilitation Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Injection Drug Use Diagnosis Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de16"
  }, {
    "type": "depends-on",
    "display": "Value set Maternal Care Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de109"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Conditions Codes",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1235.497"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Encounters Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Observations Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de905"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Procedures Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de673"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Supervision Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de43"
  }, {
    "type": "depends-on",
    "display": "Value set Third Trimester Encounters Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de39"
  }, {
    "type": "depends-on",
    "display": "Value set PEP Dispensed Medications Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de143-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set PEP Medication Prescriptions Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de5-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Post Exposure Prophylaxis Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Prep Medication Prescriptions Codes Grouper",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/ValueSet/preexposure-prophylaxis-meds"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Gender Identity",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "CodeableConcept"
  }, {
    "name": "Encounter Type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Sexual Orientation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "CodeableConcept"
  }, {
    "name": "HIV Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Tuberculosis diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "HIV Tests",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Estimated Date of Delivery",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV Test Ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Hepatitis C Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Hepatitis C Procedures",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hepatitis C Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Syphilis Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Syphilis Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Gonorrhea Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Gonorrhea Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Chlamydia Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Chlamydia Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Drug Rehabilitation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Injection Drug Use Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Injection Findings",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Maternal Care",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Pregnancy Conditions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Pregnancy Encounters",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Pregnancy Observations",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Positive Pregnancy Observations",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pregnancy Procedures",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Pregnancy Supervision",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Third Trimester Encounters",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "PEP Dispensed Medications",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationDispense"
  }, {
    "name": "PEP Medication Prescriptions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Post Exposure Prophylaxis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Prep Medication Prescriptions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Patient Currently Pregnant",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient Diagnosed with Chlamydia",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient Diagnosed with Gonorrhea",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient Diagnosed with HCV",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient Diagnosed with Syphilis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Patient has used Injection Drugs",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Previous HIV Diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Previous HIV Screening",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Seeking STD Treatment",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Coercion",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Drug or Alcohol Use",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Exchanged for Sex",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - History",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Kind of Sex - Anal",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Kind of Sex - Vaginal",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Male - Kind of Sex - Insertive Anal",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Male - Kind of Sex - Receptive Anal",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has sex with men",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - New Partner Past 3 Months",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Number of Partners",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Partners History",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Partners HIV History",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Partners Number of Partners",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Past Year",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Sexual Activity - Women",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 1",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 10",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 2",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 3",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 4",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 5",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 6",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 7",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 8",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Question 9",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "DAST 10 Score",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV Risky Lifestyle",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Intravenous Drug User",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Exchanges Sex for Drugs or Money",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Multiple Sex Partners",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "New Sex Partner",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://loinc.org",
        "code": "76691-5",
        "display": "Gender identity"
      } ]
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "type", "status" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a0-de2"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://loinc.org",
        "code": "76690-7",
        "display": "Sexual orientation"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a1-de2"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.451"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a2-de2"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "161714006",
        "display": "Estimated date of delivery (observable entity)"
      } ]
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "mustSupport": [ "code", "status", "doNotPerform" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a2-de217"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-b1-de1-codes-grouper"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-b2-de113"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.B2.DE1",
        "display": "Hepatitis C Test"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-c1-de1-codes-grouper"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.C2.DE1",
        "display": "Syphilis Test"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-d1-de1-codes-grouper"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.D2.DE1",
        "display": "Gonorrhea Test"
      } ]
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-e1-de1-codes-grouper"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.E2.DE1",
        "display": "Chlamydia Test"
      } ]
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de2"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de16"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.F1.DE12",
        "display": "Injection Findings"
      } ]
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de109"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "mustSupport": [ "code", "clinicalStatus", "verificationStatus" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1235.497"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "type", "status" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de2"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de905"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status", "value", "interpretation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de905"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de673"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de43"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "mustSupport": [ "type", "status" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de39"
    } ]
  }, {
    "type": "MedicationDispense",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationDispense" ],
    "mustSupport": [ "medication" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de143-codes-grouper"
    } ]
  }, {
    "type": "MedicationDispense",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationDispense" ],
    "mustSupport": [ "medication" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de143-codes-grouper"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "medication" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de5-codes-grouper"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "medication.reference" ]
  }, {
    "type": "Medication",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Medication" ],
    "mustSupport": [ "id" ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-g1-de2"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "medication" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/hopena/hiv-cds/ValueSet/preexposure-prophylaxis-meds"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "mustSupport": [ "medication.reference" ]
  }, {
    "type": "Medication",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Medication" ],
    "mustSupport": [ "id" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE3",
        "display": "Patient Currently Pregnant"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE7",
        "display": "Patient Diagnosed with Chlamydia"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE6",
        "display": "Patient Diagnosed with Gonorrhea"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE4",
        "display": "Patient Diagnosed with HCV"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE5",
        "display": "Patient Diagnosed with Syphilis"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE8",
        "display": "Patient has used Injection Drugs"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE2",
        "display": "Previous HIV Diagnosis"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE1",
        "display": "Previous HIV Screening"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE9",
        "display": "Seeking STD Treatment"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE22",
        "display": "Sexual Activity - Coercion"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE20",
        "display": "Sexual Activity - Drug or Alcohol Use"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE21",
        "display": "Sexual Activity - Exchanged for Sex"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE12",
        "display": "Sexual Activity - History"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE23",
        "display": "Sexual Activity - Kind of Sex - Anal"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE26",
        "display": "Sexual Activity - Kind of Sex - Vaginal"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE25",
        "display": "Sexual Activity - Male - Kind of Sex - Insertive Anal"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE24",
        "display": "Sexual Activity - Male - Kind of Sex - Receptive Anal"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "472986005",
        "display": "Sexually active with men (finding)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE16",
        "display": "Sexual Activity - New Partner Past 3 Months"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE15",
        "display": "Sexual Activity - Number of Partners"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE17",
        "display": "Sexual Activity - Partners History"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE19",
        "display": "Sexual Activity - Partners HIV History"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE18",
        "display": "Sexual Activity - Partners Number of Partners"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE11",
        "display": "Sexual Activity - Past Year"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://fhir.org/guides/nachc/hiv-cds/CodeSystem/hiv-custom",
        "code": "NACHC.H1.DE14",
        "display": "Sexual Activity - Women"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254039",
        "display": "Have you used drugs other than those required for medical reasons"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254072",
        "display": "Have you had medical problems as a result of your drug use (e.g., memory loss, hepatitis, convulsions, bleeding, etc.)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254057",
        "display": "Do you use more than one drug at a time"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254058",
        "display": "Are you always able to stop using drugs when you want to"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254061",
        "display": "Have you had blackouts or flashbacks as a result of drug use"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254063",
        "display": "Do you ever feel bad or guilty about your drug use"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254065",
        "display": "Does your spouse (or parents) ever complain about your involvement with drugs"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254066",
        "display": "Have you neglected your family because of your use of drugs"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254067",
        "display": "Have you engaged in illegal activities in order to obtain drugs"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "https://cde.drugabuse.gov",
        "code": "3254070",
        "display": "Have you ever experienced withdrawal symptoms (felt sick) when you stopped taking drugs"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://loinc.org",
        "code": "82667-7",
        "display": "Total Score [DAST-10]"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "266974005",
        "display": "Human immunodeficiency virus risk lifestyle (finding)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "228388006",
        "display": "Intravenous drug user (finding)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "159798008",
        "display": "Exchanges sex for money or drugs (occupation)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "225516002",
        "display": "Multiple Sexual Contact (finding)"
      } ]
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "status" ],
    "codeFilter": [ {
      "path": "code",
      "code": [ {
        "system": "http://snomed.info/sct",
        "code": "771458000",
        "display": "New sexual contact (finding)"
      } ]
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}