{
  "resourceType": "Library",
  "id": "HIVConcepts",
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.6.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "XML"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": false
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "None"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  } ],
  "url": "http://fhir.org/guides/nachc/hiv-cds/Library/HIVConcepts",
  "name": "HIVConcepts",
  "title": "Library - HIV Concepts",
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "description": "A Generated Logic library encapsulating necessary concepts and terminology for HIV Screening.",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "Code system ICD-10",
    "resource": "http://hl7.org/fhir/sid/icd-10"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMED-CT",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system RxNorm",
    "resource": "http://www.nlm.nih.gov/research/umls/rxnorm"
  }, {
    "type": "depends-on",
    "display": "Code system CPT",
    "resource": "http://www.ama-assn.org/go/cpt"
  }, {
    "type": "depends-on",
    "display": "Code system HCPCS",
    "resource": "https://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets"
  }, {
    "type": "depends-on",
    "display": "Code system CIEL",
    "resource": "http://hl7.org/fhir/sid/ciel"
  }, {
    "type": "depends-on",
    "display": "Code system ICD-11",
    "resource": "http://hl7.org/fhir/sid/icd-11"
  }, {
    "type": "depends-on",
    "display": "Code system ICHI",
    "resource": "https://mitel.dimi.uniud.it/ichi/#http://id.who.int/ichi"
  }, {
    "type": "depends-on",
    "display": "Code system ICF",
    "resource": "http://hl7.org/fhir/sid/icf-nl"
  }, {
    "type": "depends-on",
    "display": "Code system NDC",
    "resource": "http://hl7.org/fhir/sid/ndc"
  }, {
    "type": "depends-on",
    "display": "Code system NIDA",
    "resource": "https://cde.drugabuse.gov"
  }, {
    "type": "depends-on",
    "display": "Code system Observation Interpretation",
    "resource": "http://terminology.hl7.org/CodeSystem/v3-ObservationInterpretation"
  }, {
    "type": "depends-on",
    "display": "Value set HIV infection as a condition Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a1-de2"
  }, {
    "type": "depends-on",
    "display": "Value set HIV-1 HIV 2 Ab Ag tests Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-a2-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-b1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Gonorrhea Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-d1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Chlamydia Diagnosis Codes Grouper",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-e1-de1-codes-grouper"
  }, {
    "type": "depends-on",
    "display": "Value set Drug Rehabilitation Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Injection Drug Use Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f1-de201"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Encounters Codes",
    "resource": "http://fhir.org/guides/nachc/hiv-cds/ValueSet/nachc-f2-de2"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy Observations Codes",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/ValueSet/pregnancy-observation-codes"
  }, {
    "type": "depends-on",
    "display": "Value set Prep Medication Prescriptions Codes Grouper",
    "resource": "http://fhir.org/guides/hopena/hiv-cds/ValueSet/preexposure-prophylaxis-meds"
  }, {
    "type": "depends-on",
    "display": "Value set Tuberculosis (Disorders) (ICD10CM)",
    "resource": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.451"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": "PD94bWwgdmVyc2lvbj0nMS4xJyBlbmNvZGluZz0nVVRGLTgnPz4KPExpYnJhcnkgdHlwZT0iTGlicmFyeSIgbG9jYWxJZD0iMCI+CiAgPHdzdHhuczE6aWRlbnRpZmllciB4bWxuczp3c3R4bnMxPSJ1cm46aGw3LW9yZzplbG06cjEiIHdzdHhuczE6dHlwZT0iVmVyc2lvbmVkSWRlbnRpZmllciIgaWQ9IkhJVkNvbmNlcHRzIiBzeXN0ZW09Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvaG9wZW5hL2hpdi1jZHMiLz4KICA8d3N0eG5zMjpzY2hlbWFJZGVudGlmaWVyIHhtbG5zOndzdHhuczI9InVybjpobDctb3JnOmVsbTpyMSIgd3N0eG5zMjp0eXBlPSJWZXJzaW9uZWRJZGVudGlmaWVyIiBpZD0idXJuOmhsNy1vcmc6ZWxtIiB2ZXJzaW9uPSJyMSIvPgogIDx3c3R4bnMzOnVzaW5ncyB4bWxuczp3c3R4bnMzPSJ1cm46aGw3LW9yZzplbG06cjEiIHdzdHhuczM6dHlwZT0iTGlicmFyeSRVc2luZ3MiPgogICAgPHdzdHhuczM6ZGVmPgogICAgICA8d3N0eG5zMzpkZWYgd3N0eG5zMzp0eXBlPSJVc2luZ0RlZiIgbG9jYWxJZD0iMSIgbG9jYWxJZGVudGlmaWVyPSJTeXN0ZW0iIHVyaT0idXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIi8+CiAgICA8L3dzdHhuczM6ZGVmPgogIDwvd3N0eG5zMzp1c2luZ3M+CiAgPHdzdHhuczQ6Y29kZVN5c3RlbXMgeG1sbnM6d3N0eG5zND0idXJuOmhsNy1vcmc6ZWxtOnIxIiB3c3R4bnM0OnR5cGU9IkxpYnJhcnkkQ29kZVN5c3RlbXMiPgogICAgPHdzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMDYiIGxvY2F0b3I9IjQ6MS00OjUzIiBuYW1lPSJJQ0QtMTAiIGlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9pY2QtMTAiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uIHdzdHhuczQ6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM1OnMgeG1sbnM6d3N0eG5zNT0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMDYiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4vLyBDb2RlIFN5c3RlbXMKPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZXN5c3RlbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iSUNELTEwIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHA6Ly9obDcub3JnL2ZoaXIvc2lkL2ljZC0xMCc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnM1OnM+CiAgICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnM0OmRlZj4KICAgICAgPHdzdHhuczQ6ZGVmIHdzdHhuczQ6dHlwZT0iQ29kZVN5c3RlbURlZiIgbG9jYWxJZD0iMjA3IiBsb2NhdG9yPSI1OjEtNTo0OCIgbmFtZT0iU05PTUVELUNUIiBpZD0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24gd3N0eG5zNDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczY6cyB4bWxuczp3c3R4bnM2PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIwNyI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGVzeXN0ZW0gPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IlNOT01FRC1DVCI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vc25vbWVkLmluZm8vc2N0Jzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczY6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMDgiIGxvY2F0b3I9IjY6MS02OjM4IiBuYW1lPSJMT0lOQyIgaWQ9Imh0dHA6Ly9sb2luYy5vcmciIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uIHdzdHhuczQ6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM3OnMgeG1sbnM6d3N0eG5zNz0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMDgiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2Rlc3lzdGVtIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJMT0lOQyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vbG9pbmMub3JnJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczc6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMDkiIGxvY2F0b3I9Ijc6MS03OjY2IiBuYW1lPSJSeE5vcm0iIGlkPSJodHRwOi8vd3d3Lm5sbS5uaWguZ292L3Jlc2VhcmNoL3VtbHMvcnhub3JtIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbiB3c3R4bnM0OnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zODpzIHhtbG5zOndzdHhuczg9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjA5Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZXN5c3RlbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iUnhOb3JtIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHA6Ly93d3cubmxtLm5paC5nb3YvcmVzZWFyY2gvdW1scy9yeG5vcm0nPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zODpzPgogICAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zNDpkZWY+CiAgICAgIDx3c3R4bnM0OmRlZiB3c3R4bnM0OnR5cGU9IkNvZGVTeXN0ZW1EZWYiIGxvY2FsSWQ9IjIxMCIgbG9jYXRvcj0iODoxLTg6NTAiIG5hbWU9IkNQVCIgaWQ9Imh0dHA6Ly93d3cuYW1hLWFzc24ub3JnL2dvL2NwdCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24gd3N0eG5zNDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczk6cyB4bWxuczp3c3R4bnM5PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIxMCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGVzeXN0ZW0gPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkNQVCI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vd3d3LmFtYS1hc3NuLm9yZy9nby9jcHQnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zOTpzPgogICAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zNDpkZWY+CiAgICAgIDx3c3R4bnM0OmRlZiB3c3R4bnM0OnR5cGU9IkNvZGVTeXN0ZW1EZWYiIGxvY2FsSWQ9IjIxMSIgbG9jYXRvcj0iOToxLTk6NzgiIG5hbWU9IkhDUENTIiBpZD0iaHR0cHM6Ly93d3cuY21zLmdvdi9NZWRpY2FyZS9Db2RpbmcvSENQQ1NSZWxlYXNlQ29kZVNldHMiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uIHdzdHhuczQ6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMxMDpzIHhtbG5zOndzdHhuczEwPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIxMSI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGVzeXN0ZW0gPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkhDUENTIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHBzOi8vd3d3LmNtcy5nb3YvTWVkaWNhcmUvQ29kaW5nL0hDUENTUmVsZWFzZUNvZGVTZXRzJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczEwOnM+CiAgICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnM0OmRlZj4KICAgICAgPHdzdHhuczQ6ZGVmIHdzdHhuczQ6dHlwZT0iQ29kZVN5c3RlbURlZiIgbG9jYWxJZD0iMjEyIiBsb2NhdG9yPSIxMDoxLTEwOjQ5IiBuYW1lPSJDSUVMIiBpZD0iaHR0cDovL2hsNy5vcmcvZmhpci9zaWQvY2llbCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24gd3N0eG5zNDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczExOnMgeG1sbnM6d3N0eG5zMTE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjEyIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZXN5c3RlbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iQ0lFTCI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9jaWVsJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczExOnM+CiAgICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnM0OmRlZj4KICAgICAgPHdzdHhuczQ6ZGVmIHdzdHhuczQ6dHlwZT0iQ29kZVN5c3RlbURlZiIgbG9jYWxJZD0iMjEzIiBsb2NhdG9yPSIxMToxLTExOjUzIiBuYW1lPSJJQ0QtMTEiIGlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9pY2QtMTEiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uIHdzdHhuczQ6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMxMjpzIHhtbG5zOndzdHhuczEyPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIxMyI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGVzeXN0ZW0gPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IklDRC0xMSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9pY2QtMTEnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMTI6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMTQiIGxvY2F0b3I9IjEyOjEtMTI6NzciIG5hbWU9IklDSEkiIGlkPSJodHRwczovL21pdGVsLmRpbWkudW5pdWQuaXQvaWNoaS8jaHR0cDovL2lkLndoby5pbnQvaWNoaSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24gd3N0eG5zNDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczEzOnMgeG1sbnM6d3N0eG5zMTM9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjE0Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZXN5c3RlbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iSUNISSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwczovL21pdGVsLmRpbWkudW5pdWQuaXQvaWNoaS8jaHR0cDovL2lkLndoby5pbnQvaWNoaSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnMxMzpzPgogICAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnM0OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zNDpkZWY+CiAgICAgIDx3c3R4bnM0OmRlZiB3c3R4bnM0OnR5cGU9IkNvZGVTeXN0ZW1EZWYiIGxvY2FsSWQ9IjIxNSIgbG9jYXRvcj0iMTM6MS0xMzo1MCIgbmFtZT0iSUNGIiBpZD0iaHR0cDovL2hsNy5vcmcvZmhpci9zaWQvaWNmLW5sIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbiB3c3R4bnM0OnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMTQ6cyB4bWxuczp3c3R4bnMxND0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMTUiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2Rlc3lzdGVtIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJJQ0YiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2hsNy5vcmcvZmhpci9zaWQvaWNmLW5sJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczE0OnM+CiAgICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnM0OmRlZj4KICAgICAgPHdzdHhuczQ6ZGVmIHdzdHhuczQ6dHlwZT0iQ29kZVN5c3RlbURlZiIgbG9jYWxJZD0iMjE2IiBsb2NhdG9yPSIxNDoxLTE0OjQ3IiBuYW1lPSJOREMiIGlkPSJodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9uZGMiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uIHdzdHhuczQ6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMxNTpzIHhtbG5zOndzdHhuczE1PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIxNiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGVzeXN0ZW0gPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ik5EQyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9uZGMnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMTU6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMTciIGxvY2F0b3I9IjE1OjEtMTU6NDYiIG5hbWU9Ik5JREEiIGlkPSJodHRwczovL2NkZS5kcnVnYWJ1c2UuZ292IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbiB3c3R4bnM0OnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMTY6cyB4bWxuczp3c3R4bnMxNj0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMTciPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2Rlc3lzdGVtIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHBzOi8vY2RlLmRydWdhYnVzZS5nb3YnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMTY6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgICA8d3N0eG5zNDpkZWYgd3N0eG5zNDp0eXBlPSJDb2RlU3lzdGVtRGVmIiBsb2NhbElkPSIyMTgiIGxvY2F0b3I9IjE3OjEtMTc6MTA5IiBuYW1lPSJPYnNlcnZhdGlvbiBJbnRlcnByZXRhdGlvbiIgaWQ9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtT2JzZXJ2YXRpb25JbnRlcnByZXRhdGlvbiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczQ6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnM0OmFubm90YXRpb24gd3N0eG5zNDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczE3OnMgeG1sbnM6d3N0eG5zMTc9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjE4Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gY29kZXN5c3RlbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvQ29kZVN5c3RlbS9oaXYtY3VzdG9tJwo8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2Rlc3lzdGVtIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJPYnNlcnZhdGlvbiBJbnRlcnByZXRhdGlvbiI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU9ic2VydmF0aW9uSW50ZXJwcmV0YXRpb24nPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMTc6cz4KICAgICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zNDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczQ6ZGVmPgogICAgPC93c3R4bnM0OmRlZj4KICA8L3dzdHhuczQ6Y29kZVN5c3RlbXM+CiAgPHdzdHhuczE4OnZhbHVlU2V0cyB4bWxuczp3c3R4bnMxOD0idXJuOmhsNy1vcmc6ZWxtOnIxIiB3c3R4bnMxODp0eXBlPSJMaWJyYXJ5JFZhbHVlU2V0cyI+CiAgICA8d3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMTkiIGxvY2F0b3I9IjIzOjEtMjM6MTA3IiBuYW1lPSJISVYgaW5mZWN0aW9uIGFzIGEgY29uZGl0aW9uIENvZGVzIiBpZD0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWExLWRlMiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczE5OnMgeG1sbnM6d3N0eG5zMTk9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjE5Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gVmFsdWUgU2V0cwovLyB2YWx1ZXNldCAiRW5jb3VudGVyIFR5cGUgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWEwLWRlMicKLy8gdmFsdWVzZXQgIlNleHVhbCBPcmllbnRhdGlvbiBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYTAtZGU0OScKLy8gdmFsdWVzZXQgIkdlbmRlciBJZGVudGl0eSBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYTAtZGU1NicKPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+dmFsdWVzZXQgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkhJViBpbmZlY3Rpb24gYXMgYSBjb25kaXRpb24gQ29kZXMiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWExLWRlMic8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnMxOTpzPgogICAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMxODpkZWY+CiAgICAgIDx3c3R4bnMxODpkZWYgd3N0eG5zMTg6dHlwZT0iVmFsdWVTZXREZWYiIGxvY2FsSWQ9IjIyMCIgbG9jYXRvcj0iMjQ6MS0yNDoxMDIiIG5hbWU9IkhJVi0xIEhJViAyIEFiIEFnIHRlc3RzIENvZGVzIiBpZD0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWEyLWRlMiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczIwOnMgeG1sbnM6d3N0eG5zMjA9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjIwIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+dmFsdWVzZXQgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkhJVi0xIEhJViAyIEFiIEFnIHRlc3RzIENvZGVzIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1hMi1kZTInPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMjA6cz4KICAgICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMjEiIGxvY2F0b3I9IjMyOjEtMzI6MTIyIiBuYW1lPSJIZXBhdGl0aXMgQyBEaWFnbm9zaXMgQ29kZXMgR3JvdXBlciIgaWQ9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1iMS1kZTEtY29kZXMtZ3JvdXBlciIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczIxOnMgeG1sbnM6d3N0eG5zMjE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjIxIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gdmFsdWVzZXQgIkhJViBWaXJhbCBMb2FkIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1hMi1kZTE3MycKLy8gdmFsdWVzZXQgIkhJViBUZXN0IENvZGVzIEdyb3VwZXIiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWEyLWRlMS1jb2Rlcy1ncm91cGVyJwovLyB2YWx1ZXNldCAiSElWIFRlc3QgT3JkZXJlZCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYTItZGUyMTcnCi8vIHZhbHVlc2V0ICJIZXBhdGl0aXMgQyBWaXJ1cyBJbmZlY3Rpb24gKERpc29yZGVycykgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWIxLWRlMicKLy8gdmFsdWVzZXQgIkNocm9uaWMgSW5mZWN0aW9uIG9mIGxpdmVyIGR1ZSB0byBIZXBhdGl0aXMgQyB2aXJ1cyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYjEtZGUzMScKLy8gdmFsdWVzZXQgIkhDViBJbmZlY3Rpb24gKE9yZ2FuaXNtIG9yIFN1YnN0YW5jZSBpbiBMYWIgUmVzdWx0cykgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWIxLWRlMzMnCi8vIHZhbHVlc2V0ICJIZXBhdGl0aXMgQyBjb25kaXRpb24gQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWIxLWRlNjEnCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPnZhbHVlc2V0IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJIZXBhdGl0aXMgQyBEaWFnbm9zaXMgQ29kZXMgR3JvdXBlciI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYjEtZGUxLWNvZGVzLWdyb3VwZXInPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMjE6cz4KICAgICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMjIiIGxvY2F0b3I9IjUwOjEtNTA6MTIwIiBuYW1lPSJHb25vcnJoZWEgRGlhZ25vc2lzIENvZGVzIEdyb3VwZXIiIGlkPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDEtZGUxLWNvZGVzLWdyb3VwZXIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMxODphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24gd3N0eG5zMTg6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMyMjpzIHhtbG5zOndzdHhuczIyPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIyMiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPi8vIHZhbHVlc2V0ICJIZXBhdGl0aXMgQyBBZyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYjItZGUyJwovLyB2YWx1ZXNldCAiSGVwYXRpdGlzIEMgbnVjbGVpYyBhY2lkIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1iMi1kZTUnCi8vIHZhbHVlc2V0ICJIZXBhdGl0aXMgQyB2aXJ1cyBhbnRpYm9keSB0ZXN0IENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1iMi1kZTQxJwovLyB2YWx1ZXNldCAiSGVwYXRpdGlzIEMgdmlydXMgbnVjbGVpYyAoUk5BKSB0ZXN0IENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1iMi1kZTgxJwovLyB2YWx1ZXNldCAiSGVwYXRpdGlzIEMgVGVzdCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYjItZGUxMDMnCi8vIHZhbHVlc2V0ICJIZXBhdGl0aXMgQyBUZXN0IENvZGVzIEdyb3VwZXIiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWIyLWRlMS1jb2Rlcy1ncm91cGVyJwovLyB2YWx1ZXNldCAiSGVwYXRpdGlzIEMgUHJvY2VkdXJlcyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYjItZGUxMTMnCi8vIHZhbHVlc2V0ICJTeXBoaWxpcyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtYzEtZGUyJwovLyB2YWx1ZXNldCAiU3lwaGlsaXMgKE9yZ2FuaXNtIG9yIFN1YnN0YW5jZSBpbiBMYWIgUmVzdWx0cykgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWMxLWRlMTg1JwovLyB2YWx1ZXNldCAiU3lwaGlsaXMgY29uZGl0aW9uIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1jMS1kZTE5MicKLy8gLy8gdmFsdWVzZXQgIlN5cGhpbGlzIERpYWdub3NpcyBDb2RlcyBHcm91cGVyIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1jMS1kZTEtY29kZXMtZ3JvdXBlcicKLy8gdmFsdWVzZXQgIlN5cGhpbGlzIChUZXN0cyBmb3IgVHJlcG9uZW1hIHBhbGxpZHVtIE51Y2xlaWMgQWNpZCkgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWMyLWRlMicKLy8gdmFsdWVzZXQgIlN5cGhpbGlzIChUZXN0cyBmb3IgVHJlcG9uZW1hbCBvciBOb24gQW50aWJvZHkpIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1jMi1kZTgnCi8vIHZhbHVlc2V0ICJTeXBoaWxpcyBUZXN0IENvZGVzIEdyb3VwZXIiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWMyLWRlMS1jb2Rlcy1ncm91cGVyJwovLyB2YWx1ZXNldCAiR29ub2NvY2NhbCBJbmZlY3Rpb25zIGFuZCBWZW5lcmVhbCBEaXNlYXNlcyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDEtZGUyJwovLyB2YWx1ZXNldCAiR29ub3JyaGVhIE9yZ2FuaXNtIG9yIFN1YnN0YW5jZSBpbiBMYWIgUmVzdWx0cyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDEtZGUxNjcnCi8vIHZhbHVlc2V0ICJHb25vcnJoZWEgU2Vjb25kYXJ5IFNpdGVzIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1kMS1kZTE4MicKPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+dmFsdWVzZXQgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ikdvbm9ycmhlYSBEaWFnbm9zaXMgQ29kZXMgR3JvdXBlciI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDEtZGUxLWNvZGVzLWdyb3VwZXInPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMjI6cz4KICAgICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMjMiIGxvY2F0b3I9IjYxOjEtNjE6MTIwIiBuYW1lPSJDaGxhbXlkaWEgRGlhZ25vc2lzIENvZGVzIEdyb3VwZXIiIGlkPSJodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZTEtZGUxLWNvZGVzLWdyb3VwZXIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMxODphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24gd3N0eG5zMTg6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMyMzpzIHhtbG5zOndzdHhuczIzPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIyMyI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPi8vIHZhbHVlc2V0ICJHb25vcnJoZWEgVGVzdHMgZm9yIE5laXNzZXJpYSBnb25vcnJoZWEgYnkgQ3VsdHVyZSBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDItZGUyJwovLyB2YWx1ZXNldCAiR29ub3JyaGVhIFRlc3RzIGZvciBOZWlzc2VyaWEgTnVjbGVpYyBBY2lkIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1kMi1kZTE3JwovLyB2YWx1ZXNldCAiR29ub3JyaGVhIFRlc3RzIGZvciBOZWlzc2VyaWEgc3BlY2llcyBieSBDdWx0dXJlIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1kMi1kZTYwJwovLyB2YWx1ZXNldCAiR29ub3JyaGVhIHRlc3QgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWQyLWRlNjcnCi8vIHZhbHVlc2V0ICJHb25vcnJoZWEgVGVzdHMgYW5kIENobGFteWRpYS9Hb25vcnJoZWEgQ29tYmluZWQgVGVzdHMgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWQyLWRlMTAxJwovLyB2YWx1ZXNldCAiR29ub3JyaGVhIFRlc3QgQ29kZXMgR3JvdXBlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZDItZGUxLWNvZGVzLWdyb3VwZXInCi8vIHZhbHVlc2V0ICJDaGxhbXlkaWEgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUxLWRlMicKLy8gdmFsdWVzZXQgIkNobGFteWRpYSBJbmZlY3Rpb25zIGFuZCBWZW5lcmVhbCBEaXNlYXNlcyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZTEtZGUyNycKLy8gdmFsdWVzZXQgIkNobGFteWRpYSB0cmFjaG9tYXRpcyBJbmZlY3Rpb24gQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUxLWRlMzInCi8vIHZhbHVlc2V0ICJDaGxhbXlkaWEgdHJhY2hvbWF0aXMgb3JnYW5pc20gQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUxLWRlNjMnCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPnZhbHVlc2V0IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJDaGxhbXlkaWEgRGlhZ25vc2lzIENvZGVzIEdyb3VwZXIiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUxLWRlMS1jb2Rlcy1ncm91cGVyJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczIzOnM+CiAgICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczE4OmRlZj4KICAgICAgPHdzdHhuczE4OmRlZiB3c3R4bnMxODp0eXBlPSJWYWx1ZVNldERlZiIgbG9jYWxJZD0iMjI0IiBsb2NhdG9yPSI2OToxLTY5Ojk4IiBuYW1lPSJEcnVnIFJlaGFiaWxpdGF0aW9uIENvZGVzIiBpZD0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWYxLWRlMiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczI0OnMgeG1sbnM6d3N0eG5zMjQ9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjI0Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gdmFsdWVzZXQgIkNobGFteWRpYSBTY3JlZW5pbmcgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUyLWRlMicKLy8gdmFsdWVzZXQgIkNobGFteWRpYSB0ZXN0IENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1lMi1kZTQ5JwovLyB2YWx1ZXNldCAiQ2hsYW15ZGlhIFRyYWNob21hdGlzIFRlc3RzLCBGUEFSIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1lMi1kZTEyMycKLy8gdmFsdWVzZXQgIlRlc3RzIGZvciBDaGxhbXlkaWEgdHJhY2hvbWF0aXMgQW50aWdlbiBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZTItZGUxMjUnCi8vIHZhbHVlc2V0ICJUZXN0cyBmb3IgQ2hsYW15ZGlhIHRyYWNob21hdGlzIGJ5IEN1bHR1cmUgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUyLWRlMTU0JwovLyB2YWx1ZXNldCAiVGVzdHMgZm9yIENobGFteWRpYSB0cmFjaG9tYXRpcyBOdWNsZWljIEFjaWQgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWUyLWRlMTY0JwovLyB2YWx1ZXNldCAiQ2hsYW15ZGlhIFRlc3QgQ29kZXMgR3JvdXBlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZTItZGUxLWNvZGVzLWdyb3VwZXInCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPnZhbHVlc2V0IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJEcnVnIFJlaGFiaWxpdGF0aW9uIENvZGVzIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1mMS1kZTInPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMjQ6cz4KICAgICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMjUiIGxvY2F0b3I9IjcyOjEtNzI6OTkiIG5hbWU9IkluamVjdGlvbiBEcnVnIFVzZSBDb2RlcyIgaWQ9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1mMS1kZTIwMSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczI1OnMgeG1sbnM6d3N0eG5zMjU9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjI1Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gdmFsdWVzZXQgIkluamVjdGlvbiBGaW5kaW5ncyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZjEtZGUxMycKLy8gdmFsdWVzZXQgIkluamVjdGlvbiBEcnVnIFVzZSBEaWFnbm9zaXMgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWYxLWRlMTYnCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPnZhbHVlc2V0IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJJbmplY3Rpb24gRHJ1ZyBVc2UgQ29kZXMiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWYxLWRlMjAxJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczI1OnM+CiAgICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczE4OmRlZj4KICAgICAgPHdzdHhuczE4OmRlZiB3c3R4bnMxODp0eXBlPSJWYWx1ZVNldERlZiIgbG9jYWxJZD0iMjI2IiBsb2NhdG9yPSI3MzoxLTczOjk5IiBuYW1lPSJQcmVnbmFuY3kgRW5jb3VudGVycyBDb2RlcyIgaWQ9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1mMi1kZTIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMxODphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24gd3N0eG5zMTg6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMyNjpzIHhtbG5zOndzdHhuczI2PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIyNiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPnZhbHVlc2V0IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJQcmVnbmFuY3kgRW5jb3VudGVycyBDb2RlcyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZjItZGUyJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczI2OnM+CiAgICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczE4OmRlZj4KICAgICAgPHdzdHhuczE4OmRlZiB3c3R4bnMxODp0eXBlPSJWYWx1ZVNldERlZiIgbG9jYWxJZD0iMjI3IiBsb2NhdG9yPSI3ODoxLTc4OjExNyIgbmFtZT0iUHJlZ25hbmN5IE9ic2VydmF0aW9ucyBDb2RlcyIgaWQ9Imh0dHA6Ly9maGlyLm9yZy9ndWlkZXMvaG9wZW5hL2hpdi1jZHMvVmFsdWVTZXQvcHJlZ25hbmN5LW9ic2VydmF0aW9uLWNvZGVzIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMxODphbm5vdGF0aW9uIHdzdHhuczE4OnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMjc6cyB4bWxuczp3c3R4bnMyNz0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMjciPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4vLyB2YWx1ZXNldCAiVGhpcmQgVHJpbWVzdGVyIEVuY291bnRlcnMgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWYyLWRlMzknCi8vIHZhbHVlc2V0ICJQcmVnbmFuY3kgU3VwZXJ2aXNpb24gQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWYyLWRlNDMnCi8vIHZhbHVlc2V0ICJNYXRlcm5hbCBDYXJlIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1mMi1kZTEwOScKLy8gdmFsdWVzZXQgIlByZWduYW5jeSBQcm9jZWR1cmVzIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1mMi1kZTY3MycKPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+dmFsdWVzZXQgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IlByZWduYW5jeSBPYnNlcnZhdGlvbnMgQ29kZXMiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2ZoaXIub3JnL2d1aWRlcy9ob3BlbmEvaGl2LWNkcy9WYWx1ZVNldC9wcmVnbmFuY3ktb2JzZXJ2YXRpb24tY29kZXMnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMjc6cz4KICAgICAgICAgIDwvd3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMTg6ZGVmPgogICAgICA8d3N0eG5zMTg6ZGVmIHdzdHhuczE4OnR5cGU9IlZhbHVlU2V0RGVmIiBsb2NhbElkPSIyMjgiIGxvY2F0b3I9Ijk0OjEtOTQ6MTMzIiBuYW1lPSJQcmVwIE1lZGljYXRpb24gUHJlc2NyaXB0aW9ucyBDb2RlcyBHcm91cGVyIiBpZD0iaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9ob3BlbmEvaGl2LWNkcy9WYWx1ZVNldC9wcmVleHBvc3VyZS1wcm9waHlsYXhpcy1tZWRzIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMxODphbm5vdGF0aW9uIHdzdHhuczE4OnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMjg6cyB4bWxuczp3c3R4bnMyOD0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMjgiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4vLyB2YWx1ZXNldCAiUHJlZ25hbmN5IE9ic2VydmF0aW9ucyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZjItZGU5MDUnCi8vIHZhbHVlc2V0ICJQcmVnbmFuY3kgQ29uZGl0aW9ucyBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZjItZGUxMTMyJwovLyB2YWx1ZXNldCAiUHJlZ25hbmN5IENvbmRpdGlvbnMgQ29kZXMiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzNzYyLjEuNC4xMjM1LjQ5NycKLy8gdmFsdWVzZXQgIlBvc3QgRXhwb3N1cmUgUHJvcGh5bGF4aXMgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWcxLWRlMicKLy8gdmFsdWVzZXQgIlByZWZlcnJlZCBuUEVQIE9yZGVyIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1nMS1kZTYnCi8vIHZhbHVlc2V0ICJBbHRlcm5hdGl2ZSBuUEVQIE9yZGVyIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1nMS1kZTEwMCcKLy8gdmFsdWVzZXQgIlBFUCBNZWRpY2F0aW9uIFByZXNjcmlwdGlvbnMgQ29kZXMgR3JvdXBlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzEtZGU1LWNvZGVzLWdyb3VwZXInCi8vIHZhbHVlc2V0ICJQcmVmZXJyZWQgblBFUCBTdXBwbGllZCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzEtZGUxNDQnCi8vIHZhbHVlc2V0ICJBbHRlcm5hdGl2ZSBuUEVQIFN1cHBsaWVkIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1nMS1kZTI5OScKLy8gdmFsdWVzZXQgIlBFUCBEaXNwZW5zZWQgTWVkaWNhdGlvbnMgQ29kZXMgR3JvdXBlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzEtZGUxNDMtY29kZXMtZ3JvdXBlcicKLy8gdmFsdWVzZXQgIkVtdHJpY2l0YWJpbmUgKEZUQykgMjAwbWcgT3JkZXIgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWcyLWRlMicKLy8gdmFsdWVzZXQgIlRBRiAyNW1nIC8gRlRDIDIwMG1nIE9yZGVyIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1nMi1kZTcnCi8vIHZhbHVlc2V0ICJUREYgMzAwbWcgLyBGVEMgMjAwbWcgT3JkZXIgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWcyLWRlMTUnCi8vIHZhbHVlc2V0ICJUZW5vZm92aXIgQWxhZmVuYW1pZGUgKFRBRikgMjUgbWcgT3JkZXIgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWcyLWRlMTgnCi8vIHZhbHVlc2V0ICJUZW5vZm92aXIgRGlzb3Byb3hpbCBGdW1hcmF0ZSAoVERGKSAzMDBtZyBPcmRlciBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzItZGUyMicKPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+dmFsdWVzZXQgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IlByZXAgTWVkaWNhdGlvbiBQcmVzY3JpcHRpb25zIENvZGVzIEdyb3VwZXIiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4naHR0cDovL2ZoaXIub3JnL2d1aWRlcy9ob3BlbmEvaGl2LWNkcy9WYWx1ZVNldC9wcmVleHBvc3VyZS1wcm9waHlsYXhpcy1tZWRzJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczI4OnM+CiAgICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczE4OmRlZj4KICAgICAgPHdzdHhuczE4OmRlZiB3c3R4bnMxODp0eXBlPSJWYWx1ZVNldERlZiIgbG9jYWxJZD0iMjI5IiBsb2NhdG9yPSIxMDI6MS0xMDI6MTE2IiBuYW1lPSJUdWJlcmN1bG9zaXMgKERpc29yZGVycykgKElDRDEwQ00pIiBpZD0iaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzNzYyLjEuNC4xMTQ2LjQ1MSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMTg6YW5ub3RhdGlvbiB3c3R4bnMxODp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczI5OnMgeG1sbnM6d3N0eG5zMjk9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjI5Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gdmFsdWVzZXQgIkVtdHJpY2l0YWJpbmUgKEZUQykgMjAwbWcgU3VwcGxpZWQgQ29kZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L25hY2hjLWcyLWRlMjcnCi8vIHZhbHVlc2V0ICJUQUYgMjVtZyAvIEZUQyAyMDBtZyBTdXBwbGllZCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzItZGUzNScKLy8gdmFsdWVzZXQgIlRERiAzMDBtZyAvIEZUQyAyMDBtZyBTdXBwbGllZCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzItZGUzNycKLy8gdmFsdWVzZXQgIlRlbm9mb3ZpciBBbGFmZW5hbWlkZSAoVEFGKSAyNSBtZyBTdXBwbGllZCBDb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzItZGU3OCcKLy8gdmFsdWVzZXQgIlRlbm9mb3ZpciBEaXNvcHJveGlsIEZ1bWFyYXRlIChUREYpIDMwMG1nIFN1cHBsaWVkIENvZGVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvbmFjaGMvaGl2LWNkcy9WYWx1ZVNldC9uYWNoYy1nMi1kZTc5JwovLyB2YWx1ZXNldCAiUHJlcCBEaXNwZW5zZWQgTWVkaWNhdGlvbnMgQ29kZXMgR3JvdXBlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvbmFjaGMtZzItZGUyNi1jb2Rlcy1ncm91cGVyJwovLyBESAo8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz52YWx1ZXNldCA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iVHViZXJjdWxvc2lzIChEaXNvcmRlcnMpIChJQ0QxMENNKSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjExNDYuNDUxJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczI5OnM+CiAgICAgICAgICA8L3dzdHhuczE4OmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMxODphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczE4OmRlZj4KICAgIDwvd3N0eG5zMTg6ZGVmPgogIDwvd3N0eG5zMTg6dmFsdWVTZXRzPgogIDx3c3R4bnMzMDpjb2RlcyB4bWxuczp3c3R4bnMzMD0idXJuOmhsNy1vcmc6ZWxtOnIxIiB3c3R4bnMzMDp0eXBlPSJMaWJyYXJ5JENvZGVzIj4KICAgIDx3c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjMwIiBsb2NhdG9yPSIxMTA6MS0xMTA6NzgiIG5hbWU9IlNleHVhbCBPcmllbnRhdGlvbiIgaWQ9Ijc2NjkwLTciIGRpc3BsYXk9IlNleHVhbCBvcmllbnRhdGlvbiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjMxIiBsb2NhdG9yPSIxMTA6NDMtMTEwOjQ5IiBuYW1lPSJMT0lOQyIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMzMTpzIHhtbG5zOndzdHhuczMxPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIzMCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPi8qIE1BTlVBTCBWQUxVRVNFVFMgLS0gKkRPIE5PVCBPVkVSV1JJVEUqICovCi8vIHZhbHVlc2V0ICJHYXkgT3IgQmlzZXh1YWwiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy9uYWNoYy9oaXYtY2RzL1ZhbHVlU2V0L0dheU9yQmlzZXh1YWwnCi8vIHZhbHVlc2V0ICJUcmFuc2dlbmRlciI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL25hY2hjL2hpdi1jZHMvVmFsdWVTZXQvVHJhbnNnZW5kZXInCi8vIHZhbHVlc2V0ICJUQiI6ICdodHRwOi8vZXhhbXBsZS5vcmcvZmhpci9WYWx1ZVNldC90dWJlcmN1bG9zaXMtY29tcHJlaGVuc2l2ZS12YWx1ZS1zZXQnCgovLyBDb2Rlcwo8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJTZXh1YWwgT3JpZW50YXRpb24iPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nNzY2OTAtNyc8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZnJvbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWUgcj0iMjMxIj4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+IkxPSU5DIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nU2V4dWFsIG9yaWVudGF0aW9uJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczMxOnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyMzIiIGxvY2F0b3I9IjExMToxLTExMTo3MiIgbmFtZT0iR2VuZGVyIElkZW50aXR5IiBpZD0iNzY2OTEtNSIgZGlzcGxheT0iR2VuZGVyIGlkZW50aXR5IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyMzMiIGxvY2F0b3I9IjExMTo0MC0xMTE6NDYiIG5hbWU9IkxPSU5DIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczMyOnMgeG1sbnM6d3N0eG5zMzI9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjMyIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iR2VuZGVyIElkZW50aXR5Ijwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Jzc2NjkxLTUnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjIzMyI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJMT0lOQyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J0dlbmRlciBpZGVudGl0eSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnMzMjpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjM0IiBsb2NhdG9yPSIxNDU6MS0xNDU6MTI0IiBuYW1lPSJEQVNUIDEwIFF1ZXN0aW9uIDEiIGlkPSIzMjU0MDM5IiBkaXNwbGF5PSJIYXZlIHlvdSB1c2VkIGRydWdzIG90aGVyIHRoYW4gdGhvc2UgcmVxdWlyZWQgZm9yIG1lZGljYWwgcmVhc29ucyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjM1IiBsb2NhdG9yPSIxNDU6NDMtMTQ1OjQ4IiBuYW1lPSJOSURBIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczMzOnMgeG1sbnM6d3N0eG5zMzM9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjM0Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ly8gY29kZSAiSElWIFRlc3QiOiAnTkFDSEMuQTIuREUxJyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdISVYgVGVzdCcKLy8gY29kZSAiSGVwYXRpdGlzIEMgVGVzdCI6ICdOQUNIQy5CMi5ERTEnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ0hlcGF0aXRpcyBDIFRlc3QnCi8vIGNvZGUgIlN5cGhpbGlzIFRlc3QiOiAnTkFDSEMuQzIuREUxJyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdTeXBoaWxpcyBUZXN0JwovLyBjb2RlICJHb25vcnJoZWEgVGVzdCI6ICdOQUNIQy5EMi5ERTEnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ0dvbm9ycmhlYSBUZXN0JwovLyBjb2RlICJDaGxhbXlkaWEgVGVzdCI6ICdOQUNIQy5FMi5ERTEnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ0NobGFteWRpYSBUZXN0JwovLyBjb2RlICJJbmplY3Rpb24gRmluZGluZ3MiOiAnTkFDSEMuRjEuREUxMicgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnSW5qZWN0aW9uIEZpbmRpbmdzJwovLyBjb2RlICJQcmVnbmFuY3kgT2JzZXJ2YXRpb25zIjogJ05BQ0hDLkYyLkRFOTA0JyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdQcmVnbmFuY3kgT2JzZXJ2YXRpb25zJwovLyBjb2RlICJQcmV2aW91cyBISVYgU2NyZWVuaW5nIjogJ05BQ0hDLkgxLkRFMScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnUHJldmlvdXMgSElWIFNjcmVlbmluZycKLy8gY29kZSAiUHJldmlvdXMgSElWIERpYWdub3NpcyI6ICdOQUNIQy5IMS5ERTInIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1ByZXZpb3VzIEhJViBEaWFnbm9zaXMnCi8vIGNvZGUgIlBhdGllbnQgQ3VycmVudGx5IFByZWduYW50IjogJ05BQ0hDLkgxLkRFMycgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnUGF0aWVudCBDdXJyZW50bHkgUHJlZ25hbnQnCi8vIGNvZGUgIlBhdGllbnQgRGlhZ25vc2VkIHdpdGggSENWIjogJ05BQ0hDLkgxLkRFNCcgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnUGF0aWVudCBEaWFnbm9zZWQgd2l0aCBIQ1YnCi8vIGNvZGUgIlBhdGllbnQgRGlhZ25vc2VkIHdpdGggU3lwaGlsaXMiOiAnTkFDSEMuSDEuREU1JyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdQYXRpZW50IERpYWdub3NlZCB3aXRoIFN5cGhpbGlzJwovLyBjb2RlICJQYXRpZW50IERpYWdub3NlZCB3aXRoIEdvbm9ycmhlYSI6ICdOQUNIQy5IMS5ERTYnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1BhdGllbnQgRGlhZ25vc2VkIHdpdGggR29ub3JyaGVhJwovLyBjb2RlICJQYXRpZW50IERpYWdub3NlZCB3aXRoIENobGFteWRpYSI6ICdOQUNIQy5IMS5ERTcnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1BhdGllbnQgRGlhZ25vc2VkIHdpdGggQ2hsYW15ZGlhJwovLyBjb2RlICJQYXRpZW50IGhhcyB1c2VkIEluamVjdGlvbiBEcnVncyI6ICdOQUNIQy5IMS5ERTgnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1BhdGllbnQgaGFzIHVzZWQgSW5qZWN0aW9uIERydWdzJwovLyBjb2RlICJTZWVraW5nIFNURCBUcmVhdG1lbnQiOiAnTkFDSEMuSDEuREU5JyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdTZWVraW5nIFNURCBUcmVhdG1lbnQnCi8vIGNvZGUgIlByZXZpb3VzIGV4cGVyaWVuY2Ugd2l0aCBQUkVQIjogJ05BQ0hDLkgxLkRFMTAnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1ByZXZpb3VzIGV4cGVyaWVuY2Ugd2l0aCBQUkVQJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBQYXN0IFllYXIiOiAnTkFDSEMuSDEuREUxMScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gUGFzdCBZZWFyJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBIaXN0b3J5IjogJ05BQ0hDLkgxLkRFMTInIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1NleHVhbCBBY3Rpdml0eSAtIEhpc3RvcnknCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIE1lbiI6ICdOQUNIQy5IMS5ERTEzJyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdTZXh1YWwgQWN0aXZpdHkgLSBNZW4nCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIFdvbWVuIjogJ05BQ0hDLkgxLkRFMTQnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1NleHVhbCBBY3Rpdml0eSAtIFdvbWVuJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBOdW1iZXIgb2YgUGFydG5lcnMiOiAnTkFDSEMuSDEuREUxNScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gTnVtYmVyIG9mIFBhcnRuZXJzJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBOZXcgUGFydG5lciBQYXN0IDMgTW9udGhzIjogJ05BQ0hDLkgxLkRFMTYnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1NleHVhbCBBY3Rpdml0eSAtIE5ldyBQYXJ0bmVyIFBhc3QgMyBNb250aHMnCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIFBhcnRuZXJzIEhpc3RvcnkiOiAnTkFDSEMuSDEuREUxNycgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gUGFydG5lcnMgSGlzdG9yeScKLy8gY29kZSAiU2V4dWFsIEFjdGl2aXR5IC0gUGFydG5lcnMgTnVtYmVyIG9mIFBhcnRuZXJzIjogJ05BQ0hDLkgxLkRFMTgnIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1NleHVhbCBBY3Rpdml0eSAtIFBhcnRuZXJzIE51bWJlciBvZiBQYXJ0bmVycycKLy8gY29kZSAiU2V4dWFsIEFjdGl2aXR5IC0gUGFydG5lcnMgSElWIEhpc3RvcnkiOiAnTkFDSEMuSDEuREUxOScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gUGFydG5lcnMgSElWIEhpc3RvcnknCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIERydWcgb3IgQWxjb2hvbCBVc2UiOiAnTkFDSEMuSDEuREUyMCcgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gRHJ1ZyBvciBBbGNvaG9sIFVzZScKLy8gY29kZSAiU2V4dWFsIEFjdGl2aXR5IC0gRXhjaGFuZ2VkIGZvciBTZXgiOiAnTkFDSEMuSDEuREUyMScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gRXhjaGFuZ2VkIGZvciBTZXgnCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIENvZXJjaW9uIjogJ05BQ0hDLkgxLkRFMjInIGZyb20gIkV4dGVuZGVkIENvZGVzIENvZGVTeXN0ZW0iIGRpc3BsYXkgJ1NleHVhbCBBY3Rpdml0eSAtIENvZXJjaW9uJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBLaW5kIG9mIFNleCAtIEFuYWwiOiAnTkFDSEMuSDEuREUyMycgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gS2luZCBvZiBTZXggLSBBbmFsJwovLyBjb2RlICJTZXh1YWwgQWN0aXZpdHkgLSBNYWxlIC0gS2luZCBvZiBTZXggLSBSZWNlcHRpdmUgQW5hbCI6ICdOQUNIQy5IMS5ERTI0JyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdTZXh1YWwgQWN0aXZpdHkgLSBNYWxlIC0gS2luZCBvZiBTZXggLSBSZWNlcHRpdmUgQW5hbCcKLy8gY29kZSAiU2V4dWFsIEFjdGl2aXR5IC0gTWFsZSAtIEtpbmQgb2YgU2V4IC0gSW5zZXJ0aXZlIEFuYWwiOiAnTkFDSEMuSDEuREUyNScgZnJvbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSIgZGlzcGxheSAnU2V4dWFsIEFjdGl2aXR5IC0gTWFsZSAtIEtpbmQgb2YgU2V4IC0gSW5zZXJ0aXZlIEFuYWwnCi8vIGNvZGUgIlNleHVhbCBBY3Rpdml0eSAtIEtpbmQgb2YgU2V4IC0gVmFnaW5hbCI6ICdOQUNIQy5IMS5ERTI2JyBmcm9tICJFeHRlbmRlZCBDb2RlcyBDb2RlU3lzdGVtIiBkaXNwbGF5ICdTZXh1YWwgQWN0aXZpdHkgLSBLaW5kIG9mIFNleCAtIFZhZ2luYWwnCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkRBU1QgMTAgUXVlc3Rpb24gMSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiczMjU0MDM5Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyMzUiPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iTklEQSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J0hhdmUgeW91IHVzZWQgZHJ1Z3Mgb3RoZXIgdGhhbiB0aG9zZSByZXF1aXJlZCBmb3IgbWVkaWNhbCByZWFzb25zJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczMzOnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyMzYiIGxvY2F0b3I9IjE0NjoxLTE0Njo5OCIgbmFtZT0iREFTVCAxMCBRdWVzdGlvbiAyIiBpZD0iMzI1NDA1NyIgZGlzcGxheT0iRG8geW91IHVzZSBtb3JlIHRoYW4gb25lIGRydWcgYXQgYSB0aW1lIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyMzciIGxvY2F0b3I9IjE0Njo0My0xNDY6NDgiIG5hbWU9Ik5JREEiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMzQ6cyB4bWxuczp3c3R4bnMzND0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyMzYiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJEQVNUIDEwIFF1ZXN0aW9uIDIiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nMzI1NDA1Nyc8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZnJvbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWUgcj0iMjM3Ij4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+Ik5JREEiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidEbyB5b3UgdXNlIG1vcmUgdGhhbiBvbmUgZHJ1ZyBhdCBhIHRpbWUnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMzQ6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgICA8d3N0eG5zMzA6ZGVmIHdzdHhuczMwOnR5cGU9IkNvZGVEZWYiIGxvY2FsSWQ9IjIzOCIgbG9jYXRvcj0iMTQ3OjEtMTQ3OjExNSIgbmFtZT0iREFTVCAxMCBRdWVzdGlvbiAzIiBpZD0iMzI1NDA1OCIgZGlzcGxheT0iQXJlIHlvdSBhbHdheXMgYWJsZSB0byBzdG9wIHVzaW5nIGRydWdzIHdoZW4geW91IHdhbnQgdG8iIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjIzOSIgbG9jYXRvcj0iMTQ3OjQzLTE0Nzo0OCIgbmFtZT0iTklEQSIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMzNTpzIHhtbG5zOndzdHhuczM1PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjIzOCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkRBU1QgMTAgUXVlc3Rpb24gMyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiczMjU0MDU4Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyMzkiPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iTklEQSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J0FyZSB5b3UgYWx3YXlzIGFibGUgdG8gc3RvcCB1c2luZyBkcnVncyB3aGVuIHlvdSB3YW50IHRvJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczM1OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNDAiIGxvY2F0b3I9IjE0ODoxLTE0ODoxMTkiIG5hbWU9IkRBU1QgMTAgUXVlc3Rpb24gNCIgaWQ9IjMyNTQwNjEiIGRpc3BsYXk9IkhhdmUgeW91IGhhZCBibGFja291dHMgb3IgZmxhc2hiYWNrcyBhcyBhIHJlc3VsdCBvZiBkcnVnIHVzZSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjQxIiBsb2NhdG9yPSIxNDg6NDMtMTQ4OjQ4IiBuYW1lPSJOSURBIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczM2OnMgeG1sbnM6d3N0eG5zMzY9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjQwIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iREFTVCAxMCBRdWVzdGlvbiA0Ijwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzMyNTQwNjEnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI0MSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nSGF2ZSB5b3UgaGFkIGJsYWNrb3V0cyBvciBmbGFzaGJhY2tzIGFzIGEgcmVzdWx0IG9mIGRydWcgdXNlJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczM2OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNDIiIGxvY2F0b3I9IjE0OToxLTE0OToxMDkiIG5hbWU9IkRBU1QgMTAgUXVlc3Rpb24gNSIgaWQ9IjMyNTQwNjMiIGRpc3BsYXk9IkRvIHlvdSBldmVyIGZlZWwgYmFkIG9yIGd1aWx0eSBhYm91dCB5b3VyIGRydWcgdXNlIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNDMiIGxvY2F0b3I9IjE0OTo0My0xNDk6NDgiIG5hbWU9Ik5JREEiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zMzc6cyB4bWxuczp3c3R4bnMzNz0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNDIiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJEQVNUIDEwIFF1ZXN0aW9uIDUiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nMzI1NDA2Myc8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZnJvbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWUgcj0iMjQzIj4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+Ik5JREEiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidEbyB5b3UgZXZlciBmZWVsIGJhZCBvciBndWlsdHkgYWJvdXQgeW91ciBkcnVnIHVzZSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnMzNzpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjQ0IiBsb2NhdG9yPSIxNTA6MS0xNTA6MTM2IiBuYW1lPSJEQVNUIDEwIFF1ZXN0aW9uIDYiIGlkPSIzMjU0MDY1IiBkaXNwbGF5PSJEb2VzIHlvdXIgc3BvdXNlIChvciBwYXJlbnRzKSBldmVyIGNvbXBsYWluIGFib3V0IHlvdXIgaW52b2x2ZW1lbnQgd2l0aCBkcnVncyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjQ1IiBsb2NhdG9yPSIxNTA6NDMtMTUwOjQ4IiBuYW1lPSJOSURBIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczM4OnMgeG1sbnM6d3N0eG5zMzg9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjQ0Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iREFTVCAxMCBRdWVzdGlvbiA2Ijwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzMyNTQwNjUnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI0NSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nRG9lcyB5b3VyIHNwb3VzZSAob3IgcGFyZW50cykgZXZlciBjb21wbGFpbiBhYm91dCB5b3VyIGludm9sdmVtZW50IHdpdGggZHJ1Z3MnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zMzg6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgICA8d3N0eG5zMzA6ZGVmIHdzdHhuczMwOnR5cGU9IkNvZGVEZWYiIGxvY2FsSWQ9IjI0NiIgbG9jYXRvcj0iMTUxOjEtMTUxOjExOCIgbmFtZT0iREFTVCAxMCBRdWVzdGlvbiA3IiBpZD0iMzI1NDA2NiIgZGlzcGxheT0iSGF2ZSB5b3UgbmVnbGVjdGVkIHlvdXIgZmFtaWx5IGJlY2F1c2Ugb2YgeW91ciB1c2Ugb2YgZHJ1Z3MiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjI0NyIgbG9jYXRvcj0iMTUxOjQzLTE1MTo0OCIgbmFtZT0iTklEQSIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnMzOTpzIHhtbG5zOndzdHhuczM5PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI0NiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkRBU1QgMTAgUXVlc3Rpb24gNyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiczMjU0MDY2Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyNDciPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iTklEQSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J0hhdmUgeW91IG5lZ2xlY3RlZCB5b3VyIGZhbWlseSBiZWNhdXNlIG9mIHlvdXIgdXNlIG9mIGRydWdzJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczM5OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNDgiIGxvY2F0b3I9IjE1MjoxLTE1MjoxMjIiIG5hbWU9IkRBU1QgMTAgUXVlc3Rpb24gOCIgaWQ9IjMyNTQwNjciIGRpc3BsYXk9IkhhdmUgeW91IGVuZ2FnZWQgaW4gaWxsZWdhbCBhY3Rpdml0aWVzIGluIG9yZGVyIHRvIG9idGFpbiBkcnVncyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjQ5IiBsb2NhdG9yPSIxNTI6NDMtMTUyOjQ4IiBuYW1lPSJOSURBIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczQwOnMgeG1sbnM6d3N0eG5zNDA9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjQ4Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iREFTVCAxMCBRdWVzdGlvbiA4Ijwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzMyNTQwNjcnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI0OSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nSGF2ZSB5b3UgZW5nYWdlZCBpbiBpbGxlZ2FsIGFjdGl2aXRpZXMgaW4gb3JkZXIgdG8gb2J0YWluIGRydWdzJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQwOnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNTAiIGxvY2F0b3I9IjE1MzoxLTE1MzoxNDYiIG5hbWU9IkRBU1QgMTAgUXVlc3Rpb24gOSIgaWQ9IjMyNTQwNzAiIGRpc3BsYXk9IkhhdmUgeW91IGV2ZXIgZXhwZXJpZW5jZWQgd2l0aGRyYXdhbCBzeW1wdG9tcyAoZmVsdCBzaWNrKSB3aGVuIHlvdSBzdG9wcGVkIHRha2luZyBkcnVncyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjUxIiBsb2NhdG9yPSIxNTM6NDMtMTUzOjQ4IiBuYW1lPSJOSURBIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczQxOnMgeG1sbnM6d3N0eG5zNDE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjUwIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iREFTVCAxMCBRdWVzdGlvbiA5Ijwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzMyNTQwNzAnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI1MSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nSGF2ZSB5b3UgZXZlciBleHBlcmllbmNlZCB3aXRoZHJhd2FsIHN5bXB0b21zIChmZWx0IHNpY2spIHdoZW4geW91IHN0b3BwZWQgdGFraW5nIGRydWdzJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQxOnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNTIiIGxvY2F0b3I9IjE1NDoxLTE1NDoxNzgiIG5hbWU9IkRBU1QgMTAgUXVlc3Rpb24gMTAiIGlkPSIzMjU0MDcyIiBkaXNwbGF5PSJIYXZlIHlvdSBoYWQgbWVkaWNhbCBwcm9ibGVtcyBhcyBhIHJlc3VsdCBvZiB5b3VyIGRydWcgdXNlIChlLmcuLCBtZW1vcnkgbG9zcywgaGVwYXRpdGlzLCBjb252dWxzaW9ucywgYmxlZWRpbmcsIGV0Yy4pIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNTMiIGxvY2F0b3I9IjE1NDo0NC0xNTQ6NDkiIG5hbWU9Ik5JREEiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zNDI6cyB4bWxuczp3c3R4bnM0Mj0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNTIiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJEQVNUIDEwIFF1ZXN0aW9uIDEwIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzMyNTQwNzInPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI1MyI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJOSURBIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nSGF2ZSB5b3UgaGFkIG1lZGljYWwgcHJvYmxlbXMgYXMgYSByZXN1bHQgb2YgeW91ciBkcnVnIHVzZSAoZS5nLiwgbWVtb3J5IGxvc3MsIGhlcGF0aXRpcywgY29udnVsc2lvbnMsIGJsZWVkaW5nLCBldGMuKSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnM0MjpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjU0IiBsb2NhdG9yPSIxNTU6MS0xNTU6NzYiIG5hbWU9IkRBU1QgMTAgU2NvcmUiIGlkPSI4MjY2Ny03IiBkaXNwbGF5PSJUb3RhbCBTY29yZSBbREFTVC0xMF0iIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjI1NSIgbG9jYXRvcj0iMTU1OjM4LTE1NTo0NCIgbmFtZT0iTE9JTkMiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zNDM6cyB4bWxuczp3c3R4bnM0Mz0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNTQiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJEQVNUIDEwIFNjb3JlIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+JzgyNjY3LTcnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI1NSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJMT0lOQyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J1RvdGFsIFNjb3JlIFtEQVNULTEwXSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnM0MzpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjU2IiBsb2NhdG9yPSIxNTc6MS0xNTc6ODUiIG5hbWU9IlBvc2l0aXZlIFRlc3QgVmFsdWUiIGlkPSIxMDgyODAwNCIgZGlzcGxheT0iUG9zaXRpdmUgVGVzdCBWYWx1ZSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjU3IiBsb2NhdG9yPSIxNTc6NDUtMTU3OjU1IiBuYW1lPSJTTk9NRUQtQ1QiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zNDQ6cyB4bWxuczp3c3R4bnM0ND0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNTYiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4vLyBESCBmb2xsb3dzCjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IlBvc2l0aXZlIFRlc3QgVmFsdWUiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nMTA4MjgwMDQnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI1NyI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJTTk9NRUQtQ1QiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidQb3NpdGl2ZSBUZXN0IFZhbHVlJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQ0OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNTgiIGxvY2F0b3I9IjE1ODoxLTE1ODoxMTUiIG5hbWU9IlBvc2l0aXZlIFRlc3QgSW50ZXJwcmV0YXRpb24iIGlkPSJQT1MiIGRpc3BsYXk9IlBvc2l0aXZlIFRlc3QgSW50ZXJwcmV0YXRpb24iIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjI1OSIgbG9jYXRvcj0iMTU4OjQ5LTE1ODo3NiIgbmFtZT0iT2JzZXJ2YXRpb24gSW50ZXJwcmV0YXRpb24iLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zNDU6cyB4bWxuczp3c3R4bnM0NT0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNTgiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJQb3NpdGl2ZSBUZXN0IEludGVycHJldGF0aW9uIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J1BPUyc8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZnJvbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWUgcj0iMjU5Ij4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+Ik9ic2VydmF0aW9uIEludGVycHJldGF0aW9uIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nUG9zaXRpdmUgVGVzdCBJbnRlcnByZXRhdGlvbic8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnM0NTpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjYwIiBsb2NhdG9yPSIxNTk6MS0xNTk6MTIwIiBuYW1lPSJFc3RpbWF0ZWQgRGF0ZSBvZiBEZWxpdmVyeSIgaWQ9IjE2MTcxNDAwNiIgZGlzcGxheT0iRXN0aW1hdGVkIGRhdGUgb2YgZGVsaXZlcnkgKG9ic2VydmFibGUgZW50aXR5KSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+CiAgICAgICAgPHdzdHhuczMwOmNvZGVTeXN0ZW0gd3N0eG5zMzA6dHlwZT0iQ29kZVN5c3RlbVJlZiIgbG9jYWxJZD0iMjYxIiBsb2NhdG9yPSIxNTk6NTMtMTU5OjYzIiBuYW1lPSJTTk9NRUQtQ1QiLz4KICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uIHdzdHhuczMwOnR5cGU9IkFubm90YXRpb24iPgogICAgICAgICAgICA8d3N0eG5zNDY6cyB4bWxuczp3c3R4bnM0Nj0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNjAiPgogICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz5jb2RlIDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiJFc3RpbWF0ZWQgRGF0ZSBvZiBEZWxpdmVyeSI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPicxNjE3MTQwMDYnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI2MSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJTTk9NRUQtQ1QiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidFc3RpbWF0ZWQgZGF0ZSBvZiBkZWxpdmVyeSAob2JzZXJ2YWJsZSBlbnRpdHkpJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQ2OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNjIiIGxvY2F0b3I9IjE2MDoxLTE2MDoxMjAiIG5hbWU9IkhJViBSaXNreSBMaWZlc3R5bGUiIGlkPSIyNjY5NzQwMDUiIGRpc3BsYXk9Ikh1bWFuIGltbXVub2RlZmljaWVuY3kgdmlydXMgcmlzayBsaWZlc3R5bGUgKGZpbmRpbmcpIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNjMiIGxvY2F0b3I9IjE2MDo0Ni0xNjA6NTYiIG5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM0NzpzIHhtbG5zOndzdHhuczQ3PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI2MiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkhJViBSaXNreSBMaWZlc3R5bGUiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nMjY2OTc0MDA1Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyNjMiPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iU05PTUVELUNUIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nSHVtYW4gaW1tdW5vZGVmaWNpZW5jeSB2aXJ1cyByaXNrIGxpZmVzdHlsZSAoZmluZGluZyknPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zNDc6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgICA8d3N0eG5zMzA6ZGVmIHdzdHhuczMwOnR5cGU9IkNvZGVEZWYiIGxvY2FsSWQ9IjI2NCIgbG9jYXRvcj0iMTYxOjEtMTYxOjEwMCIgbmFtZT0iSW50cmF2ZW5vdXMgRHJ1ZyBVc2VyIiBpZD0iMjI4Mzg4MDA2IiBkaXNwbGF5PSJJbnRyYXZlbm91cyBkcnVnIHVzZXIgKGZpbmRpbmcpIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNjUiIGxvY2F0b3I9IjE2MTo0OC0xNjE6NTgiIG5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM0ODpzIHhtbG5zOndzdHhuczQ4PSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI2NCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkludHJhdmVub3VzIERydWcgVXNlciI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPicyMjgzODgwMDYnPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI2NSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJTTk9NRUQtQ1QiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidJbnRyYXZlbm91cyBkcnVnIHVzZXIgKGZpbmRpbmcpJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQ4OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNjYiIGxvY2F0b3I9IjE2MjoxLTE2MjoxMjUiIG5hbWU9IkV4Y2hhbmdlcyBTZXggZm9yIERydWdzIG9yIE1vbmV5IiBpZD0iMTU5Nzk4MDA4IiBkaXNwbGF5PSJFeGNoYW5nZXMgc2V4IGZvciBtb25leSBvciBkcnVncyAob2NjdXBhdGlvbikiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjI2NyIgbG9jYXRvcj0iMTYyOjU5LTE2Mjo2OSIgbmFtZT0iU05PTUVELUNUIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczQ5OnMgeG1sbnM6d3N0eG5zNDk9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjY2Ij4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iRXhjaGFuZ2VzIFNleCBmb3IgRHJ1Z3Mgb3IgTW9uZXkiPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nMTU5Nzk4MDA4Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyNjciPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iU05PTUVELUNUIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nRXhjaGFuZ2VzIHNleCBmb3IgbW9uZXkgb3IgZHJ1Z3MgKG9jY3VwYXRpb24pJzwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICA8L3dzdHhuczQ5OnM+CiAgICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICA8L3dzdHhuczMwOmRlZj4KICAgICAgPHdzdHhuczMwOmRlZiB3c3R4bnMzMDp0eXBlPSJDb2RlRGVmIiBsb2NhbElkPSIyNjgiIGxvY2F0b3I9IjE2MzoxLTE2MzoxMDIiIG5hbWU9Ik11bHRpcGxlIFNleCBQYXJ0bmVycyIgaWQ9IjIyNTUxNjAwMiIgZGlzcGxheT0iTXVsdGlwbGUgU2V4dWFsIENvbnRhY3QgKGZpbmRpbmcpIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNjkiIGxvY2F0b3I9IjE2Mzo0OC0xNjM6NTgiIG5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM1MDpzIHhtbG5zOndzdHhuczUwPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI2OCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Ik11bHRpcGxlIFNleCBQYXJ0bmVycyI8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz46IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPicyMjU1MTYwMDInPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGZyb20gPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlIHI9IjI2OSI+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzPiJTTk9NRUQtQ1QiPC9zPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBkaXNwbGF5IDwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPidNdWx0aXBsZSBTZXh1YWwgQ29udGFjdCAoZmluZGluZyknPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zNTA6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgICA8d3N0eG5zMzA6ZGVmIHdzdHhuczMwOnR5cGU9IkNvZGVEZWYiIGxvY2FsSWQ9IjI3MCIgbG9jYXRvcj0iMTY0OjEtMTY0OjkxIiBuYW1lPSJOZXcgU2V4IFBhcnRuZXIiIGlkPSI3NzE0NTgwMDAiIGRpc3BsYXk9Ik5ldyBzZXh1YWwgY29udGFjdCAoZmluZGluZykiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPgogICAgICAgIDx3c3R4bnMzMDpjb2RlU3lzdGVtIHdzdHhuczMwOnR5cGU9IkNvZGVTeXN0ZW1SZWYiIGxvY2FsSWQ9IjI3MSIgbG9jYXRvcj0iMTY0OjQyLTE2NDo1MiIgbmFtZT0iU05PTUVELUNUIi8+CiAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24+CiAgICAgICAgICA8d3N0eG5zMzA6YW5ub3RhdGlvbiB3c3R4bnMzMDp0eXBlPSJBbm5vdGF0aW9uIj4KICAgICAgICAgICAgPHdzdHhuczUxOnMgeG1sbnM6d3N0eG5zNTE9InVybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMSIgcj0iMjcwIj4KICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+PC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Y29kZSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4iTmV3IFNleCBQYXJ0bmVyIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+Jzc3MTQ1ODAwMCc8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZnJvbSA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWUgcj0iMjcxIj4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+IlNOT01FRC1DVCI8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICA8bmFtZT57dXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxfXM8L25hbWU+CiAgICAgICAgICAgICAgICAgIDxkZWNsYXJlZFR5cGU+b3JnLmhsNy5jcWxfYW5ub3RhdGlvbnMucjEuTmFycmF0aXZlPC9kZWNsYXJlZFR5cGU+CiAgICAgICAgICAgICAgICAgIDxzY29wZT5qYWthcnRhLnhtbC5iaW5kLkpBWEJFbGVtZW50JEdsb2JhbFNjb3BlPC9zY29wZT4KICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+IGRpc3BsYXkgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J05ldyBzZXh1YWwgY29udGFjdCAoZmluZGluZyknPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zNTE6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgICA8d3N0eG5zMzA6ZGVmIHdzdHhuczMwOnR5cGU9IkNvZGVEZWYiIGxvY2FsSWQ9IjI3MiIgbG9jYXRvcj0iMTY1OjEtMTY1Ojk4IiBuYW1lPSJIYXMgc2V4IHdpdGggbWVuIiBpZD0iNDcyOTg2MDA1IiBkaXNwbGF5PSJTZXh1YWxseSBhY3RpdmUgd2l0aCBtZW4gKGZpbmRpbmcpIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNzMiIGxvY2F0b3I9IjE2NTo0My0xNjU6NTMiIG5hbWU9IlNOT01FRC1DVCIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM1MjpzIHhtbG5zOndzdHhuczUyPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI3MiI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IkhhcyBzZXggd2l0aCBtZW4iPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+OiA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nNDcyOTg2MDA1Jzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyNzMiPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iU05PTUVELUNUIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nU2V4dWFsbHkgYWN0aXZlIHdpdGggbWVuIChmaW5kaW5nKSc8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC93c3R4bnM1MjpzPgogICAgICAgICAgPC93c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgPC93c3R4bnMzMDpkZWY+CiAgICAgIDx3c3R4bnMzMDpkZWYgd3N0eG5zMzA6dHlwZT0iQ29kZURlZiIgbG9jYWxJZD0iMjc0IiBsb2NhdG9yPSIxNjY6MS0xNjY6OTMiIG5hbWU9IlByZWduYW5jeSBDb25kaXRpb25zIENvZGVzIiBpZD0iWjMzLjEiIGRpc3BsYXk9IlByZWduYW50IHN0YXRlLCBpbmNpZGVudGFsIiBhY2Nlc3NMZXZlbD0iUHVibGljIj4KICAgICAgICA8d3N0eG5zMzA6Y29kZVN5c3RlbSB3c3R4bnMzMDp0eXBlPSJDb2RlU3lzdGVtUmVmIiBsb2NhbElkPSIyNzUiIGxvY2F0b3I9IjE2Njo0OS0xNjY6NTYiIG5hbWU9IklDRC0xMCIvPgogICAgICAgIDx3c3R4bnMzMDphbm5vdGF0aW9uPgogICAgICAgICAgPHdzdHhuczMwOmFubm90YXRpb24gd3N0eG5zMzA6dHlwZT0iQW5ub3RhdGlvbiI+CiAgICAgICAgICAgIDx3c3R4bnM1MzpzIHhtbG5zOndzdHhuczUzPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiIHI9IjI3NCI+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZT4KICAgICAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPmNvZGUgPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+IlByZWduYW5jeSBDb25kaXRpb25zIENvZGVzIjwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPjogPC9zPgogICAgICAgICAgICAgICAgICAgICAgPHM+J1ozMy4xJzwvcz4KICAgICAgICAgICAgICAgICAgICAgIDxzPiBmcm9tIDwvcz4KICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICA8cz4KICAgICAgICAgICAgICAgICAgPG5hbWU+e3VybjpobDctb3JnOmNxbC1hbm5vdGF0aW9uczpyMX1zPC9uYW1lPgogICAgICAgICAgICAgICAgICA8ZGVjbGFyZWRUeXBlPm9yZy5obDcuY3FsX2Fubm90YXRpb25zLnIxLk5hcnJhdGl2ZTwvZGVjbGFyZWRUeXBlPgogICAgICAgICAgICAgICAgICA8c2NvcGU+amFrYXJ0YS54bWwuYmluZC5KQVhCRWxlbWVudCRHbG9iYWxTY29wZTwvc2NvcGU+CiAgICAgICAgICAgICAgICAgIDx2YWx1ZSByPSIyNzUiPgogICAgICAgICAgICAgICAgICAgIDxzPgogICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cz4iSUNELTEwIjwvcz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuaWw+ZmFsc2U8L25pbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGdsb2JhbFNjb3BlPnRydWU8L2dsb2JhbFNjb3BlPgogICAgICAgICAgICAgICAgICAgICAgICA8dHlwZVN1YnN0aXR1dGVkPmZhbHNlPC90eXBlU3Vic3RpdHV0ZWQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgICA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICA8bmlsPmZhbHNlPC9uaWw+CiAgICAgICAgICAgICAgICAgIDxnbG9iYWxTY29wZT50cnVlPC9nbG9iYWxTY29wZT4KICAgICAgICAgICAgICAgICAgPHR5cGVTdWJzdGl0dXRlZD5mYWxzZTwvdHlwZVN1YnN0aXR1dGVkPgogICAgICAgICAgICAgICAgPC9zPgogICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICAgICAgICA8cz4gZGlzcGxheSA8L3M+CiAgICAgICAgICAgICAgICAgICAgICA8cz4nUHJlZ25hbnQgc3RhdGUsIGluY2lkZW50YWwnPC9zPgogICAgICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgICA8L3M+CiAgICAgICAgICAgIDwvd3N0eG5zNTM6cz4KICAgICAgICAgIDwvd3N0eG5zMzA6YW5ub3RhdGlvbj4KICAgICAgICA8L3dzdHhuczMwOmFubm90YXRpb24+CiAgICAgIDwvd3N0eG5zMzA6ZGVmPgogICAgPC93c3R4bnMzMDpkZWY+CiAgPC93c3R4bnMzMDpjb2Rlcz4KICA8d3N0eG5zNTQ6YW5ub3RhdGlvbiB4bWxuczp3c3R4bnM1ND0idXJuOmhsNy1vcmc6ZWxtOnIxIj4KICAgIDx3c3R4bnM1NDphbm5vdGF0aW9uIHdzdHhuczU0OnR5cGU9IkNxbFRvRWxtSW5mbyIgdHJhbnNsYXRvclZlcnNpb249IjMuNi4wIiB0cmFuc2xhdG9yT3B0aW9ucz0iRW5hYmxlQW5ub3RhdGlvbnMsRW5hYmxlTG9jYXRvcnMsRGlzYWJsZUxpc3REZW1vdGlvbixEaXNhYmxlTGlzdFByb21vdGlvbiIgc2lnbmF0dXJlTGV2ZWw9Ik5vbmUiLz4KICAgIDx3c3R4bnM1NDphbm5vdGF0aW9uIHdzdHhuczU0OnR5cGU9IkFubm90YXRpb24iPgogICAgICA8d3N0eG5zNTU6cyB4bWxuczp3c3R4bnM1NT0idXJuOmhsNy1vcmc6Y3FsLWFubm90YXRpb25zOnIxIiByPSIyNzQiPgogICAgICAgIDxzPgogICAgICAgICAgPHM+CiAgICAgICAgICAgIDxuYW1lPnt1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjF9czwvbmFtZT4KICAgICAgICAgICAgPGRlY2xhcmVkVHlwZT5vcmcuaGw3LmNxbF9hbm5vdGF0aW9ucy5yMS5OYXJyYXRpdmU8L2RlY2xhcmVkVHlwZT4KICAgICAgICAgICAgPHNjb3BlPmpha2FydGEueG1sLmJpbmQuSkFYQkVsZW1lbnQkR2xvYmFsU2NvcGU8L3Njb3BlPgogICAgICAgICAgICA8dmFsdWU+CiAgICAgICAgICAgICAgPHM+CiAgICAgICAgICAgICAgICA8cz48L3M+CiAgICAgICAgICAgICAgICA8cz5saWJyYXJ5IEhJVkNvbmNlcHRzPC9zPgogICAgICAgICAgICAgIDwvcz4KICAgICAgICAgICAgPC92YWx1ZT4KICAgICAgICAgICAgPG5pbD5mYWxzZTwvbmlsPgogICAgICAgICAgICA8Z2xvYmFsU2NvcGU+dHJ1ZTwvZ2xvYmFsU2NvcGU+CiAgICAgICAgICAgIDx0eXBlU3Vic3RpdHV0ZWQ+ZmFsc2U8L3R5cGVTdWJzdGl0dXRlZD4KICAgICAgICAgIDwvcz4KICAgICAgICA8L3M+CiAgICAgIDwvd3N0eG5zNTU6cz4KICAgIDwvd3N0eG5zNTQ6YW5ub3RhdGlvbj4KICA8L3dzdHhuczU0OmFubm90YXRpb24+CjwvTGlicmFyeT4K"
  } ]
}